#include <stdio.h>
#include <stdlib.h>
#include <GL/glut.h>
#include <math.h>

#define PI 3.1415926535898
#define janela_altura 400
#define janela_largura 400

float transx = 120;
float transy = 0;
float hipotenusa;

void display(void);
void tela(GLsizei w, GLsizei h);
void keyboard(unsigned char tecla, int x, int y);
float verifica();
void special(int key, int x, int y);

int main(int argc, char** argv)
{
	glutInit(&argc, argv);	// suporte a janelas

	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	// PADRAO DE CORES

	glutInitWindowSize(janela_largura, janela_altura);  // tamanho da janela
	glutInitWindowPosition(100, 100); // posicao que surge a janela
	glutCreateWindow("Colisão de Objetos - Bruno Pergher"); // cria janela

	//glutFullScreen();
	glutKeyboardFunc(&keyboard);  // chama teclado
	glutReshapeFunc(tela);  // configura a tela
	glutDisplayFunc(display);
	glutSpecialFunc(special);
	glutMainLoop(); // redesenhar

	return(0);
}


void keyboard(unsigned char tecla, int x, int y)
{
	printf("\n\n Use as setas para movimentar ");

	printf("\n\nDigite 1 para esquerda: ");
	printf("\n\nDigite 2 para direita: ");
	printf("\n\nDigite 3 para cima: ");
	printf("\n\nDigite 2 para baixo: ");

	special(tecla, x, y);

	switch (tecla)
	{
	case '1':
		transx = transx - 1;
		break;

	case '2':
		transx = transx + 1;
		break;

	case '3':
		transy = transy + 1;
		break;

	case '4':
		transy = transy - 1;
		break;

	default:
		break;
	}

	glutPostRedisplay();
}

void special(int key, int x, int y)
{
	switch (key)
	{
	case GLUT_KEY_LEFT:
		transx = transx - 1;
		break;

	case GLUT_KEY_RIGHT:
		transx = transx + 1;
		break;

	case GLUT_KEY_UP:
		transy = transy + 1;
		break;

	case GLUT_KEY_DOWN:
		transy = transy - 1;
		break;

	default:
		break;
	}

	glutPostRedisplay();
}


void desenhar()
{
	GLfloat circ_pnt = 100;
	GLfloat ang;
	GLfloat ballX = 50, ballY = 50;

	glColor3f(255, 0, 132);
	glTranslatef(-100, 0, 0);

	glBegin(GL_POLYGON);
	for (int i = 0; i < circ_pnt; i++) {
		ang = (2 * PI * i) / circ_pnt;
		glVertex2f(cos(ang) * ballX, sin(ang) * ballY);
	}

	glEnd();

	glTranslatef(transx, transy, 0);

	glColor3f(255, 132, 0);
	glBegin(GL_POLYGON);
	for (int i = 0; i < circ_pnt; i++) {
		ang = (2 * PI * i) / circ_pnt;
		glVertex2f(cos(ang) * ballX, sin(ang) * ballY);
	}

	glEnd();
}

void display()
{
	glMatrixMode(GL_MODELVIEW);  //coordenadas de desenho
	glLoadIdentity();

	float distancia = verifica();

	if (distancia < 100)
	{
		glClearColor(1.0f, 1.0f, 1.0f, 1.0f); // cor do fundo
		printf("\n\n COLISÃO! ");
	}
	else
	{
		glClearColor(0.0f, 0.0f, 0.0f, 0.0f); // cor do fundo
	}

	glClear(GL_COLOR_BUFFER_BIT); // LIMPEZA

	// Especificar o local aonde o desenho acontece
	glTranslatef(janela_largura / 2, janela_altura / 2, 0.0f);
	glViewport(0, 0, janela_largura, janela_altura);
	desenhar();

	glFlush();  // execute o desenho
}

void tela(GLsizei w, GLsizei h)
{
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();

	// cria a janela
	gluOrtho2D(0, janela_largura, 0, janela_altura);


	glMatrixMode(GL_MODELVIEW);
}

float verifica() {
	hipotenusa = sqrt((transx * transx) + (transy * transy));
	return  hipotenusa;
}